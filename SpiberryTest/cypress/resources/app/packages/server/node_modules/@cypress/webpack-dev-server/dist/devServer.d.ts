/// <reference types="cypress" />
/// <reference types="node" />
import type { Configuration } from 'webpack';
import { SourceRelativeWebpackResult } from './helpers/sourceRelativeWebpackModules';
export declare type WebpackDevServerConfig = {
    specs: Cypress.Spec[];
    cypressConfig: Cypress.PluginConfigOptions;
    devServerEvents: NodeJS.EventEmitter;
    onConfigNotFound?: (devServer: 'webpack', cwd: string, lookedIn: string[]) => void;
} & {
    framework?: typeof ALL_FRAMEWORKS[number];
    webpackConfig?: unknown;
};
declare const ALL_FRAMEWORKS: readonly ["create-react-app", "nuxt", "react", "vue-cli", "next", "vue"];
/**
 * import { devServer } from '@cypress/webpack-dev-server'
 *
 * Creates & returns a WebpackDevServer for serving files related
 * to Cypress Component Testing
 *
 * @param config
 */
export declare function devServer(devServerConfig: WebpackDevServerConfig): Promise<Cypress.ResolvedDevServerConfig>;
export declare namespace devServer {
    var create: (devServerConfig: WebpackDevServerConfig) => Promise<{
        server: unknown;
        compiler: object;
        version: 4 | 3;
    }>;
}
export declare type PresetHandlerResult = {
    frameworkConfig?: Configuration;
    sourceWebpackModulesResult: SourceRelativeWebpackResult;
};
export default devServer;
